<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="no"?>
<?rfc private="DRAFT"?>
<!DOCTYPE rfc
  SYSTEM "rfc2629.dtd">
<rfc>
  <front>
    <title>SCIM PROTOCOL</title>

    <author initials="T.D." surname="Drake" fullname="Trey Drake" role="editor">
      <organization abbrev="UnboundID">UnboundID</organization>
      <address>
        <email>trey.drake@unboundid.com</email>
      </address>
    </author>
    <author initials="C.M." surname="Mortimore" fullname="Chuck Mortimore">
      <organization abbrev="SalesForce">SalesForce</organization>
      <address>
        <email>cmortimore@salesforce.com</email>
      </address>
    </author>
    <author initials="M.A." surname="Ansari" fullname="Morteza Ansari">
      <organization abbrev="Cisco">Cisco</organization>
      <address>
        <email>morteza.ansari@webex.com</email>
      </address>
    </author>
    <author initials="K.G." surname="Grizzle" fullname="Kelly Grizzle">
      <organization abbrev="SailPoint">SailPoint</organization>
      <address>
        <email>kelly.grizzle@sailpoint.com</email>
      </address>
    </author>
    <author initials="E.W." surname="Wahlström" fullname="Erik Wahlström">
      <organization abbrev="Technology Nexus">Technology Nexus</organization>
      <address>
        <email>erik.wahlstrom@nexussafe.com</email>
      </address>
    </author>

    <date day="10" month="October" year="2011" />
    <keyword>SCIM</keyword>
    <abstract>
      <t>
        The Simple Cloud Identity Management (SCIM) specification is designed to
        make managing user identity in cloud based applications and services
        easier. The specification suite seeks to build upon experience with
        existing schemas and deployments, placing specific emphasis on
        simplicity of development and integration, while applying existing
        authentication, authorization, and privacy models. It's intent is to
        reduce the cost and complexity of user management operations by
        providing a common user schema and extension model, as well as binding
        documents to provide patterns for exchanging this schema using standard
        protocols. In essence, make it fast, cheap, and easy to move users in
        to, out of, and around the cloud.
      </t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction and Overview" anchor="intro" toc="default">
      <t>The SCIM Protocol is an application-level, REST protocol for
        provisioning and managing identity data on the web. The protocol
        supports creation, modification, retrieval, and discovery of core identity Resources; i.e., Users and Groups,
        custom Resource extensions, and a simple password change operation.
      </t>

      <section title="Intended Audience" toc="default">
        <t>
          This document is intended as a guide to SCIM API usage for both
          identity Service Providers and Consumers.
        </t>
      </section>
      <section title="Notational Conventions" anchor="notat" toc="default">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in [RFC2119].

          These keywords are capitalized when used to unambiguously specify
          requirements of the protocol or application features and behavior that
          affect the interoperability and security of implementations. When
          these words are not capitalized, they are meant in their
          natural-language sense
        </t>

        <t>
          For purposes of readability examples are not URL encoded. Implementers
          MUST percent encode URLs as described in
          <eref
            target="http://tools.ietf.org/html/rfc3986#section-2.1">RFC3896 2.1
          </eref>
        </t>
      </section>
      <section title="Definitions" anchor="defs" toc="default">
        <list style="hanging">
          <t hangText="Service Provider:">A web application that provides
            identity information via the SCIM protocol.
          </t>
          <t hangText="Consumer:">A website or application that uses the SCIM
            protocol to manage identity data maintained by the Service Provider.
          </t>
          <t hangText="Base URL:">The SCIM REST API is always relative to a Base
            URL for the API. The Base URL MUST NOT contain a query string, as
            additional path information and query string variables MAY be
            appended by Consumers as part of forming the request. Example:
            https://example.com/scim/v1/
          </t>
          <t hangText="Singular Attribute:">A Resource attribute that can appear
            at most once per Resource, e.g.displayName.
          </t>
          <t hangText="Plural Attribute:">A Resource attribute that can appear
            multiple times per Resource, e.g. emails
          </t>
          <t hangText="Simple Attribute:">A Singular or Plural attribute whose
            value is a single attribute.
          </t>
          <t hangText="Complex Attribute:">A Singular or Plural attribute whose
            value is an object containing multiple sub-attributes.
          </t>
          <t hangText="Sub-Attribute:">An attribute contained by a Complex
            Attribute.
          </t>
          <t hangText="Resource:">The Service Provider managed artifact; e.g.,
            User or Group
          </t>
        </list>
      </section>
    </section>

    <section title="Authentication and Authorization" anchor="aa" toc="default">
      <t>
        The SCIM protocol does not define a scheme for authentication and
        authorization therefore implementers are free to choose mechanisms
        appropriate to their use cases. The choice of authentication mechanism
        will impact interoperability. It is RECOMMENDED that clients be
        implemented in such a way that new authentication schemes can be
        deployed. Implementers SHOULD support existing
        authentication/authorization schemes. In particular,
        <eref target="http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-09">
          OAuth2 Bearer Token
        </eref>
        is RECOMMENDED. Appropriate security considerations of the selected
        authentication and authorization schemes SHOULD be taken.

        Because this protocol uses HTTP response status codes as the primary
        means of reporting the result of a request, servers are advised to
        respond to unauthorized or unauthenticated requests using the 401
        response code in accordance with section 10.4.2 of <eref
        target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2">
        RFC2616
      </eref>.
      </t>
      <t>
        All examples assume OAuth2; e.g.,
      </t>
      <figure height="" suppress-title="false" width="" alt="" title=""
              align="left">
        <artwork height="" name="" width="" type="" alt="" align="left"
                 xml:space="preserve"><![CDATA[
            GET /User/uid=bjensen,dc=example,dc=com HTTP/1.1
            Host: example.com
            Authorization: Bearer h480djs93hd8
                                   ]]></artwork>
      </figure>
      <t>
        The context of the request (i.e. the user for whom data is being
        requested) MUST be inferred by Service Providers.
      </t>

    </section>

    http://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html#sec15
    <section title="Security Considerations" anchor="Security" toc="default">
      <t>
        The SCIM Protocol is based on HTTP and thus subject to the security
        considerations found in Section 15 of <eref
        target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html#sec15">
        RFC2616
      </eref>.

        In recognition that SCIM Resources; e.g., User and Group, contain
        sensitive information Consumers and Service Providers SHOULD require an
        authenticated and TLS protected transport.
      </t>
    </section>

    <section title="API" anchor="api">
      <t>
        The SCIM protocol specifies well known endpoints and operations for
        managing User, Group, and Password resources as well as their
        associated schemas via standard HTTP methods:
      </t>
      <list style="hanging">
        <t hangText="GET">Retrieves a complete or partial Resource or
          Resource Schema
        </t>
        <t hangText="POST">Creates a new Resource
        </t>
        <t hangText="PUT">Modifies a Resource with a complete, consumer
          specified Resource (replace)
        </t>
        <t hangText="PATCH">Modifies a Resource with a set of consumer specified
          changes (partial update) or changes a User password
        </t>
        <t hangText="DELETE">Deletes a Resource.
        </t>
      </list>

      <texttable anchor='endpoint-summary' title="Defined endpoints">
        <ttcol align='left'>Resource</ttcol>
        <ttcol align='left'>Endpoint</ttcol>
        <ttcol align='left'>Operations</ttcol>
        <ttcol align='left'>Description</ttcol>
        <c>User</c>
        <c>/User</c>
        <c><xref target="get-resource" format="default">GET</xref>,
          <xref target="create-resource" format="default">POST</xref>,
          <xref target="edit-resource-with-put" format="default">PUT</xref>,
          <xref target="edit-resource-with-patch" format="default">PATCH</xref>,
          <xref target="delete-resource" format="default">DELETE</xref>
        </c>
        <c>Retrieve/Modify Users</c>

        <c>
          User Query/Listing
        </c>
        <c>/Users</c>
        <c>
          <xref target="query-resources" format="default">GET</xref>
        </c>
        <c>Retrieve User(s) via ad hoc queries</c>
        <c>Group</c>
        <c>/Group</c>
        <c><xref target="get-resource" format="default">GET</xref>,
          <xref target="create-resource" format="default">POST</xref>,
          <xref target="edit-resource-with-put" format="default">PUT</xref>,
          <xref target="edit-resource-with-patch" format="default">PATCH</xref>,
          <xref target="delete-resource" format="default">DELETE</xref>
        </c>
        <c>Retrieve/Modify Groups</c>
        <c>
          Group Query/Listing
        </c>
        <c>/Groups</c>
        <c>
          <xref target="query-resources" format="default">GET</xref>
        </c>
        <c>Retrieve Group(s) via ad hoc queries</c>

        <c>User Password</c>
        <c>
          /User/{userId}/password
        </c>
        <c>
          <xref target="change-password" format="default">PATCH</xref>
        </c>
        <c>Change a User's password</c>

        <c>Service Provider Configuration</c>
        <c>
          /ServiceProviderConfig
        </c>
        <c>
          <xref target="get-resource" format="default">GET</xref>
        </c>
        <c>Retrieve the Service Provider's Configuration</c>

        <c>Resource Schema</c>
        <c>
          /Schema
        </c>
        <c>
          <xref target="get-resource" format="default">GET</xref>
        </c>
        <c>Retrieve a Resource's Schema</c>

        <c>Resource Schema Query/Listing</c>
          <c>
            /Schemas
          </c>
          <c>
            <xref target="query-resources" format="default">GET</xref>
          </c>
        <c>Retrieve Resource Schema(s) via ad hoc queries</c>
        <c>Bulk</c>
        <c>
          /Bulk
        </c>
        <c>
          <xref target="bulk-resources" format="default">POST</xref>
        </c>
        <c>Bulk modify Resources</c>

      </texttable>

      <t>
        All requests to the Service Provider are made via
        <eref
          target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9">
          HTTP operations
        </eref>
        on a URL derived from the Base URL. Responses are returned in the body
        of the HTTP response, formatted as JSON or XML, depending on what is
        requested. Response and error codes SHOULD be transmitted via the HTTP
        status code of the response (if possible), and SHOULD also be specified
        in the body of the response.
      </t>

      <section title="Creating Resources" anchor="create-resource"
               toc="default">
        <t>To create new Resources, clients send POST requests to the Resource
          endpoint; i.e., /User or /Group.
        </t>

        <t>Successful Resource creation is indicated with a 201 ("Created")
          response code. Upon successful creation, the response body MUST
          contain the newly created Resource. Since the server is free to alter
          and/or ignore POSTed content, returning the full representation can be
          useful to the client, enabling it to correlate the client and server
          views of the new Resource.

          When a Resource is created, its URI must be returned in the response
          Location header.
        </t>

        <t>Below, the client sends a POST request containing a User</t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
POST /User  HTTP/1.1
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  }
}

                        ]]></artwork>
        </figure>

        <t>The server signals a successful creation with a status code of 201.
          The response includes a Location header indicating the User URI, and a
          representation of that User in the body of the response.
        </t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "e180ee84f0671b1"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "externalId":"bjensen",
  "meta":{
    "created":"2011-08-01T21:32:44.882Z",
    "lastModified":"2011-08-01T21:32:44.882Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com",
    "version":"e180ee84f0671b1"
  },
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  },
  "userName":"bjensen"
}
                        ]]></artwork>
        </figure>

      </section>
      <section title="Retrieving Resources" anchor="get-resources-ops"
               toc="default">
        <t>Users and Group Resources are retrieved via opaque, unique URLs or
          via Query. Service Providers MAY choose to respond with a sub-set of
          Resource attributes, though MUST minimally return the Resource id and
          meta attributes.
        </t>

        <section title="Retrieving a known Resource" anchor="get-resource"
                 toc="default">
          <t>To retrieve a known Resource, clients send GET requests to the
            Resource endpoint; e.g., /User/{id} or /Group/{id}.
          </t>

          <t>If the Resource exists the server responds with a status code of
            200 and includes the result in the body of the response.
          </t>

          <t>The below example retrieves a single User via the /User endpoint.
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve">
              <![CDATA[

GET /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8

                        ]]></artwork>
          </figure>

          <t>The server responds with:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve">
              <![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "f250dd84f0671c3"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "meta":{
    "created":"2011-08-01T18:29:49.793Z",
    "lastModified":"2011-08-01T18:29:49.793Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com",
    "version":"f250dd84f0671c3"
  },
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  },
  "userName":"bjensen",
  "phoneNumbers":[
    {
      "value":"555-555-8377",
      "type":"work"
    }
  ],
  "emails":[
    {
      "value":"bjensen@example.com",
      "type":"work"
    }
  ]
}
                        ]]></artwork>
          </figure>

        </section>

        <section title="List/Query Resources" anchor="query-resources"
                 toc="default">
          <t>
            SCIM defines a standard set of operations that can be used to
            filter, sort, and paginate response results. The operations are
            specified by adding query parameters to the Resource's endpoint.
            Service Providers MAY support additional query parameters not
            specified here, and Providers SHOULD ignore any query parameters
            they don't recognize.
          </t>

          <t>The below example returns the userName for all Users
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[

GET /Users?attributes=userName
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
                      ]]></artwork>
          </figure>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json

{
  "totalResults":2,
  "schemas":["urn:scim:schemas:core:1.0"],
  "Resources":[
    {
      "userName":"bjensen"
    },
    {
      "userName":"jsmith"
    }
  ]
}                  ]]></artwork>
          </figure>
          <section title="Filtering">
            <t>
              Filtering is OPTIONAL. Consumers may request a subset of Resources
              by specifying the 'filter' URL query parameter containing a filter
              expression. When specified only those Resources matching the
              filter expression SHALL be returned. The expression language that
              is used in the filter parameter supports references to attributes
              and literals. The literal values can be strings enclosed in single
              quotes, numbers and Boolean values; i.e., true or false.
            </t>
            <t>
              The attribute name and attribute operator are case insensitive.
              For example, the following two expressions will evaluate to the
              same logical value:
            </t>
            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
              <artwork height="" name="" width="" type="" alt="" align="left"
                       xml:space="preserve"><![CDATA[
filter=userName Eq 'john'

filter=Username eq 'john'
              ]]></artwork>
            </figure>

            <t>
              The filter parameter MUST contain at least one valid Boolean
              expression. Each expression MUST contain an attribute name
              followed by an attribute operator and optional value. Multiple
              expressions MAY be combined using the two logical operators.
              Furthermore expressions can be grouped together using “()”.
            </t>
            <t>
              The operators supported in the expression are listed in the
              following table.
            </t>

            <texttable anchor='filter-operator-table' title="Attribute
            Operators" alight='left'>
              <ttcol align='left'>Operator</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Behavior</ttcol>
              <c>eq</c>
              <c>equal</c>
              <c>The attribute and operator values must be identical for a
                match.
              </c>

              <c>co</c>
              <c>contains</c>
              <c>The entire operator value must be a substring of the attribute
                value for a match.
              </c>

              <c>sw</c>
              <c>starts with</c>
              <c>The entire operator value must be a substring of the attribute
                value, starting at the beginning of the attribute value. This
                criterion is satisfied if the two strings are identical.
              </c>

              <c>pr</c>
              <c>present (has value)</c>
              <c>If the attribute has a non-empty value, or if it contains a
                non-empty node for complex attributes there is a match.
              </c>

              <c>gt</c>
              <c>greater than</c>
              <c>If the attribute value is greater than operator value, there is
                a match. The actual comparison is dependent on the attribute
                type. For string attribute types, this is a lexicographical
                comparison and for DateTime types, it is a chronological
                comparison.
              </c>

              <c>ge</c>
              <c>greater than or equal</c>
              <c>If the attribute value is greater than or equal to the operator
                value, there is a match. The actual comparison is dependent on
                the attribute type. For string attribute types, this is a
                lexicographical comparison and for DateTime types, it is a
                chronological comparison.
              </c>

              <c>lt</c>
              <c>less than</c>
              <c>If the attribute value is less than operator value, there is a
                match. The actual comparison is dependent on the attribute type.
                For string attribute types, this is a lexicographical comparison
                and for DateTime types, it is a chronological comparison.
              </c>

              <c>le</c>
              <c>less than or equal</c>
              <c>If the attribute value is less than or equal to the operator
                value, there is a match. The actual comparison is dependent on
                the attribute type. For string attribute types, this is a
                lexicographical comparison and for DateTime types, it is a
                chronological comparison.
              </c>

            </texttable>

            <texttable anchor='logical-operator-table' title="Logical
               Operators" alight='left'>
              <ttcol align='left'>Operator</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Behavior</ttcol>
              <c>and</c>
              <c>Logical And</c>
              <c>The filter is only a match if both expressions evaluate to
                true.
              </c>
              <c>or</c>
              <c>Logical or</c>
              <c>The filter is a match if either expression evaluates to true.
              </c>
            </texttable>
            <texttable anchor='grouping-operator-table' title="Grouping
               Operators">
              <ttcol align='left'>Operator</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Behavior</ttcol>
              <c>()</c>
              <c>Precedence grouping.</c>
              <c>Filter expressions are evaluated from left to right unless the
                expression is enclosed in brackets.
              </c>
            </texttable>
            <t>
              If the specified attribute in a filter expression is a Plural
              attribute, the Resource MUST match if any of the instances of the
              given attribute match the specified criterion (e.g. if a User has
              multiple emails values, only one has to match for the entire User
              to match). For complex attributes, the fully qualified
              Sub-Attribute MUST be specified in the expression using the '.'
              character as separator between the attribute name and the
              Sub-Attribute name. For example, to filter by userName the
              parameter value is userName and to filter by first name, the
              parameter value is name.givenName.
            </t>

            <t>Providers MAY support additional filter operations if they
              choose. Providers MUST decline to filter results if the specified
              filter operation is not recognized and return a HTTP 400 error
              with an appropriate human readable response. For example, if a
              Consumer specified an unsupported operator named 'regex' the
              Service Provider should specify an error response description
              identifying the Consumer error; e.g., 'The operator 'regex' is not
              supported.'
            </t>

            <t>
              String type attributes are case insensitive by default unless the
              attribute type is defined as a caseExact string. Attribute
              operators ‘eq’, ‘co’, and ‘sw’ MUST perform caseIgnore matching
              for all string attributes unless the attribute is defined as
              caseExact. By default all string attributes are caseIgnore.
            </t>

            <t>Examples:</t>

            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
              <artwork height="" name="" width="" type="" alt="" align="left"
                       xml:space="preserve"><![CDATA[

filter=userName eq 'bjensen'

filter=userName co 'jensen'

filter=userName sw 'J'

filter=title pr

filter=meta.lastModified gt '2011-05-13T04:42:34Z'

filter=meta.lastModified ge '2011-05-13T04:42:34Z'

filter=meta.lastModified lt '2011-05-13T04:42:34Z'

filter=meta.lastModified le '2011-05-13T04:42:34Z'

filter=title pr and userType eq 'Employee'

filter=title pr or userType eq 'Intern'

filter=userType eq 'Employee' and (emails co 'example.com' or emails
co 'example.org')
              ]]></artwork>
            </figure>
          </section>

          <section title="Sorting">
            <t>Sort is OPTIONAL. Sorting allows Consumers to specify the order
              in which Resources are returned by specifying a combination of
              sortBy and sortOrder URL parameters.
            </t>
            <list style="hanging">
              <t hangText="sortBy:">
                The sortBy parameter specifies the attribute whose value SHALL
                be used to order the returned responses. If the sortBy attribute
                corresponds to a Singular Attribute, Resources are sorted
                according to that attribute's value; if it's a Plural Attribute,
                Resources are sorted by the value of the primary attribute, if
                any, or else the first value in the list, if any. If the
                attribute is complex the attribute name must be a path to a
                Sub-Attribute; e.g., sortBy=name.givenName. For all attribute
                types, if there is no data for the specified sortBy value they
                are sorted via the 'sortOrder' parameter; i.e., they are ordered
                first if ascending and last if descending.
              </t>
              <t hangText="sortOrder:">
                The order in which the sortBy parameter is applied. Allowed
                values are "ascending" and "descending". If a value for sortBy
                is provided and no sortOrder is specified, the sortOrder SHALL
                default to ascending.  String type attributes are case
                insensitive by default unless the attribute type is defined
                as a caseExact string. sortOrder MUST sort according to the
                attribute type; i.e., for caseIgnore attributes, sort the result
                using case insensitive, Unicode alphabetic sort
                order, with no specific locale implied and for caseExact
                attribute types, sort the result using case sensitive,
                Unicode alphabetic sort order.
              </t>
            </list>
          </section>

          <section title="Pagination">
            <t>Pagination parameters can be used together to "page through"
              large numbers of Resources so as not to overwhelm the Consumer or
              Service Provider. Pagination is not session based hence Consumers
              SHOULD never assume repeatable results. For example, a request for
              a list of 10 Resources beginning with a startIndex of 1 may return
              different results when repeated as a Resource in the original
              result could be deleted or new ones could be added in-between
              requests. Pagination parameters and general behavior are derived
              from the
              <eref
                target="http://www.opensearch.org/Specifications/OpenSearch/1.1">
                OpenSearch Protocol
              </eref>.
            </t>

            <t>The following table describes the URL pagination parameters.
            </t>

            <texttable anchor='consumer-pagination-options-table'
                       title="Pagination Request parameters">
              <ttcol align='left'>Parameter</ttcol>
              <ttcol align='left'>Description</ttcol>
              <ttcol align='left'>Default</ttcol>
              <c>startIndex</c>
              <c>The 1-based index of the first search result.
              </c>
              <c>1</c>
              <c>count</c>
              <c>Non-negative Integer. Specifies the desired maximum number of
                search results per page; e.g., 10.
              </c>
              <c>None. When specified the Service Provider MUST not return more
                results than specified though MAY return fewer results. If
                unspecified, the maximum number of results is set by the Service
                Provider.
              </c>
            </texttable>

            <t>The following table describes the query response pagination
              attributes specified by the Service Provider.
            </t>

            <texttable anchor='response-pagination-options-table'
                       title="Pagination Response Elements">
              <ttcol align='left'>Element</ttcol>
              <ttcol align='left'>Description</ttcol>
              <c>itemsPerPage</c>
              <c>Non-negative Integer. Specifies the number of search results
                returned in a query response page; e.g., 10.
              </c>
              <c>totalResults</c>
              <c>Non-negative Integer. Specifies the total number of results
                matching the Consumer query; e.g., 1000.
              </c>
              <c>startIndex</c>
              <c>The 1-based index of the first result in the current set of
                search results; e.g., 1.
              </c>
            </texttable>

            <t>
              For example, to retrieve the first 10 Users set the startIndex to
              1 and the count to 10.

              <figure height="" suppress-title="false" width="" alt="" title=""
                      align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve"><![CDATA[

GET /Users?startIndex=1&count=10
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
                      ]]></artwork>
              </figure>

              <figure height="" suppress-title="false" width="" alt="" title=""
                      align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve"><![CDATA[
{
  "totalResults":100,"itemsPerPage":10,"startIndex":1,
  "schemas":["urn:scim:schemas:core:1.0"],
  "Resources":[{
    ...
  }]
}
                                ]]></artwork>
              </figure>
              Given the example above, to continue paging set the startIndex to
              11 and re-fetch; i.e., /Users?startIndex=11&amp;count=10
            </t>
          </section>
        </section>
      </section>
      <section title="Modifying Resources" toc="default">
        <t>Resources can be modified in whole or in part via PUT or PATCH,
          respectively. Implementers MUST support PUT as specified in
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.6">
            RFC2616
          </eref>
          . Resources such as Groups may be very large hence implementers SHOULD
          support
          <eref target="http://tools.ietf.org/html/rfc5789">PATCH
          </eref>
          to enable partial resource modifications.
        </t>
        <section title="Modifying with PUT" anchor="edit-resource-with-put"
                 toc="default">
          <t>
            PUT performs a full update. Consumers must retrieve the entire
            Resource and PUT the desired modifications as the operation
            overwrites all previously stored data. Unless otherwise specified a
            successful PUT operation returns a 200 OK response code and the
            entire Resource within the response body.

            Example:
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PUT /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara",
    "middleName":"Jane"

  },
  "emails":[
    {
        "value":"bjensen@example.com"
    },
    {
        "value":"babs@jensen.org"
    }
  ]
}


                       ]]></artwork>
          </figure>
          <t>
            The service responds with the entire, updated User
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json
ETag: "b431af54f0671a2"
Location:"https://example.com/v1/User/uid=bjensen,dc=example,dc=com"
{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara",
    "middleName":"Jane"

  },
  "emails":[
    {
        "value":"bjensen@example.com"
    },
    {
        "value":"babs@jensen.org"
    }
  ],
  "meta": {
    "created":"2011-08-08T04:56:22Z",
    "lastModified":"2011-08-08T08:00:12Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com",
    "version":"b431af54f0671a2"
  }
}
               ]]></artwork>
          </figure>
        </section>

        <section title="Modifying with PATCH" anchor="edit-resource-with-patch"
                 toc="default">
          <t>PATCH is OPTIONAL.  PATCH enables consumers to send only those attributes requiring
            modification, reducing network and processing overhead. Attributes
            may be deleted, replaced, merged, or added in a single request.
          </t>

          <t>The body of a PATCH request MUST contain a partial Resource with
            the desired modifications.  The server MUST return either a 200 OK
            response code and the entire Resource (subject to the "attributes"
            query parameter - see <xref target="addtl-retrieval-query-params"
            format="default">Additional Retrieval Query Parameters</xref>)
            within the response body, or a 204 No Content response code and the
            appropriate response headers for a successful PATCH request.  The
            server MUST return a 200 OK if the "attributes" parameter is
            specified on the request.
          </t>

          <t>The server MUST process a PATCH request by first removing any
            attributes specified in the meta.attributes Sub-Attribute (if
            present) and then merging the attributes in the PATCH request body
            into the Resource.
          </t>

          <t>The meta.attributes Sub-Attribute MAY contain a list of attributes
            to be removed from the Resource.  If the PATCH request body contains
            an attribute that is present in the meta.attributes list, the
            attribute on the Resource is replaced with the value from the PATCH
            body.  If the attribute is complex the attribute name must be a path
            to a Sub-Attribute; e.g., name.givenName.  Extended schema attribute
            names must be prefixed with the attribute name's fully qualified URN
            separated by a colon (':'). For example, an extended schema
            name-spaced as 'urn:hr:schemas:user' with the simple attribute 'age'
            is fully encoded as 'urn:hr:schemas:user:age'.
          </t>

          <t>Attributes that exist in the PATCH request body but not in the
            meta.attributes Sub-Attribute will be either be updated or added to
            the Resource according to the following rules.
          </t>

          <list style="hanging">
            <t hangText="Singular attributes:">
              Singular attributes in the PATCH request body replace the
              attribute on the Resource.
            </t>
            <t hangText="Complex attributes:">
              Complex Sub-Attribute values in the PATCH request body are merged
              into the complex attribute on the Resource.
            </t>
            <t hangText="Plural attributes:">
              Plural attributes in the PATCH request body are added to the
              plural attribute on the Resource if the value does not yet exist
              or are merged into the matching plural value on the Resource if
              the value already exists.  Plural attribute values are matched by
              comparing the value Sub-Attribute from the PATCH request body to
              the value Sub-Attribute of the Resource.  Plural attributes that
              do not have a value Sub-Attribute (for example, addresses) cannot
              be matched for the purposes of partially updating an an existing
              value.  These must be deleted then added.  Similarly, plural
              attributes that do not have unique value Sub-Attributes must be
              deleted then added.
            </t>
          </list>

          <t>Individual plural values can be removed from a Resource by
            including an "operation" Sub-Attribute with the value "delete" on
            the plural attribute value in the PATCH request body.  As with
            adding/updating plural attribute values, the plural value to delete
            is determined by comparing the value Sub-Attribute from the PATCH
            request body to the value Sub-Attribute of the Resource.
            Additionally, plural attributes that do not have a value
            Sub-Attribute (or that have a non-unique value Sub-Attribute) are
            matched by comparing all Sub-Attribute values from the PATCH request
            body to the Sub-Attribute values of the Resource. A delete operation
            is ignored if the plural attribute's name is in the meta.attributes
            list.  The server MAY return a HTTP 400 error with an appropriate
            human readable response if the requested plural value to delete does
            not match a unique value on the Resource.
          </t>

          <t>The following example shows how to add a member to a group:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /Group/cn=group1,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "members": [
    {
      "display": "Babs Jensen",
      "value": "uid=bjensen,dc=example,dc=com"
    }
  ]
}
            ]]></artwork>
          </figure>

          <t>The "display" Sub-Attribute in this request is optional since the
            value attribute uniquely identifies the user to be added.  If the
            user was already a member of this group, no changes should be made
            to the Resource and a success response should be returned.  The
            server responds with either the entire updated Group or no response
            body:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
HTTP/1.1 204 No Content
Authorization: Bearer h480djs93hd8
ETag: "b431af54f0671a2"
Location: "https://example.com/v1/Group/cn=group1,dc=example,dc=com"
            ]]></artwork>
          </figure>

          <t>The following example shows how to remove a member from a group.
            As with the previous example, the "display" Sub-Attribute is
            optional.  If the user was not a member of this group, no changes
            should be made to the Resource and a success response should be
            returned.
          </t>

          <t>Note that server responses have been omitted for the rest of the
            PATCH examples.
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /Group/cn=group1,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "members": [
    {
      "display": "Babs Jensen",
      "value": "uid=bjensen,dc=example,dc=com"
      "operation": "delete"
    }
  ]
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to remove all members from a
            group:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /Group/cn=group1,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "meta": {
    "attributes": [
      "members"
    ]
  }
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to replace all of the members of a
            group with a different members list:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /Group/cn=group1,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "meta": {
    "attributes": [
      "members"
    ]
  },
  "members": [
    {
      "display": "Babs Jensen",
      "value": "uid=bjensen,dc=example,dc=com"
    },
    {
      "display": "James Smith",
      "value": "uid=jsmith,dc=example,dc=com"
    }
  ]
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to add a member to and remove a
           member from a Group in a single request:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /Group/cn=group1,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "members": [
    {
      "display": "Babs Jensen",
      "value": "uid=bjensen,dc=example,dc=com"
      "operation": "delete"
    },
    {
      "display": "James Smith",
      "value": "uid=jsmith,dc=example,dc=com"
    }
  ]
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to change a User's primary email.
            If the User already has the email address, it is made the primary
            address and the current primary address (if present) is made
            non-primary.  If the User does not already have the email address,
            it is added and made the primary address.
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "emails": [
    {
      "value": "bjensen@example.com",
      "primary": true
    }
  ]
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to change a User's address.  Since
            address does not have a value Sub-Attribute, the existing address
            must be removed and the modified address added.
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "addresses": [
    {
      "type": "work",
      "streetAddress": "100 Universal City Plaza",
      "locality": "Hollywood",
      "region": "CA",
      "postalCode": "91608",
      "country": "US",
      "formatted": "100 Universal City Plaza\nHollywood, CA 91608 US",
      "primary": true
      "operation": "delete"
    },
    {
      "type": "work",
      "streetAddress": "911 Universal City Plaza",
      "locality": "Hollywood",
      "region": "CA",
      "postalCode": "91608",
      "country": "US",
      "formatted": "911 Universal City Plaza\nHollywood, CA 91608 US",
      "primary": true
    }
  ]
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to change a User's nickname:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "nickName": "Barbie"
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to remove a User's nickname:
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "meta": {
    "attributes": [
      "nickName"
    ]
  }
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to change a User's familyName.
           This only updates the familyName and formatted on the "name" complex
           attribute. Any other name Sub-Attributes on the Resource remain
           unchanged.
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "name": {
    "formatted": "Ms. Barbara J Jensen III",
    "familyName": "Jensen"
  }
}
            ]]></artwork>
          </figure>

          <t>The following example shows how to remove a complex Sub-Attribute
           and an extended schema attribute from a User.
          </t>

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve"><![CDATA[
PATCH /User/uid=bjensen,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
ETag: "a330bc54f0671c9"

{
  "schemas": ["urn:scim:schemas:core:1.0"],
  "meta": {
    "attributes": [
      "name.formatted",
      "urn:hr:schemas:user:age"
    ]
  }
}
            ]]></artwork>
          </figure>

        </section>
      </section>
      <section title="Deleting Resources" anchor="delete-resource"
               toc="default">
        <t>Consumers request Resource removal via DELETE. Service Providers MAY
          choose not to permanently delete the Resource, but MUST return a 404
          error code for all operations associated with the previously deleted
          Id. Service Providers MUST also omit the Resource from future query
          results.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[

DELETE /User/uid=bjensen,dc=example,dc=com
Host: example.com
Authorization: Bearer h480djs93hd8
ETag: "c310cd84f0281b7"

                                      ]]></artwork>
        </figure>

        Server Response:
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 200 OK
            ]]></artwork>
        </figure>


        <t>Example: Consumer attempt to retrieve the previously deleted User</t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[

GET /User/uid=bjensen,dc=example,dc=com
Host: example.com
Authorization: Bearer h480djs93hd8
                                      ]]></artwork>
        </figure>

        Server Response:
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 404 NOT FOUND

{
  "Errors":[
    {
      "description":"Resource uid=bjensen,dc=example,dc=com not found",
      "code":"404"
    }
  ]
}

            ]]></artwork>
        </figure>

      </section>
      <section title="Change password" anchor="change-password" toc="default">
        <t>Consumers request User password change via PATCH. The change password
          operation is OPTIONAL, hence Service Providers MAY choose not to honor
          the request.

          Since a password is a facet of the User the User endpoint is
          overloaded; i.e., /User/{id}/password. The consumer MUST specify the
          attribute 'password' in the request body and MUST not specify any
          other attributes. If successful the Service Provider MUST return a 204
          response code and no content within the response body.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[

PATCH /User/uid=bjensen,dc=example,dc=com/password
Host: example.com
Authorization: Bearer h480djs93hd8

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "password":"t1meMa$heen"
}

]]></artwork>
        </figure>

        Server Response:
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 204 OK
            ]]></artwork>
        </figure>
      </section>


        <section title="Bulk" anchor="bulk-resources"
                 toc="default">

             <t>
                 Bulk is OPTIONAL. The bulk operation enables Consumers to send a potentially large collection of
                 Resource operations in a single request.  The body of a a bulk operation contains a set of HTTP
                 Resource operations using one of the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE.
             </t>
            <t>
              The following Singular Attribute is defined in addition to the 
              common attributes defined in core schema.
            </t>

            <t>
              <list style="hanging">
                <t hangText="failOnErrors">
                 An integer specifying the number of errors that the Service Provider will accept before the
                    operation is terminated and an error response is returned. OPTIONAL.
                </t>
              </list>
            </t>
            
            <t>
              The following Complex Plural Attribute is defined in addition to
              the common attributes defined in core schema.
            </t>
            <t>
              <list style="hanging">
                <t hangText="Operations">
                  Defines operations within a bulk job. Each operation corresponds to a single HTTP request against a Resource
                  endpoint. REQUIRED.
                  <list style="hanging">
                    <t hangText="method">
                      The HTTP method of the current operation. Possible values are POST, PUT, PATCH or DELETE. REQUIRED.
                    </t>
                    <t hangText="bulkId">
                      The transient identifier of a newly created Resource, unique within a bulk request and created by
                        the Consumer. The bulkId serves as a surrogate Resource id enabling Consumers to uniquely
                        identify newly created Resources in the Response and cross reference new Resources in and
                        across operations within a bulk request.  REQUIRED when method is POST.
                    </t>
                    <t hangText="version">
                      The current Resource version. Version is REQUIRED if the Service Provider supports Etags, the
                        method is PUT or DELETE, or the method is PATCH and the request is not a change password
                        operation.
                    </t>
                    <t hangText="path">
                      The Resource's relative path.  If the method is POST the value must specify a Resource type
                        endpoint; e.g., /User or /Group whereas all other method values must specify the path to
                        a specific Resource; e.g., /User/uid=bjensen,dc=example,dc=com.  REQUIRED in a request.
                    </t>
                    <t hangText="data">
                      The Resource data as it would appear for a single POST, PUT or PATCH Resource operation.
                        REQUIRED in a request when method is POST, PUT and PATCH.
                    </t>
                    <t hangText="location">
                      The Resource endpoint URL. REQUIRED in a response, except in the event of a POST failure.
                    </t>
                    <t hangText="status">
                      A complex type that contains information about the 
                      success or failure of one operation within the bulk job.
                      REQUIRED in a response.
                    </t>
                    <list style="hanging">
                      <t hangText="code">
                        The HTTP response code that would have been
                        returned if a a single HTTP request would have been 
                        used. REQUIRED.
                      </t>
                      <t hangText="description">
                        A human readable error message. REQUIRED when an error
                        occurred.
                      </t>
                    </list>
                  </list>
                </t>
              </list>
            </t>            
            <t>
              If a bulk job is processed successfully the HTTP response code 
              200 OK MUST be returned, otherwise an appropriate HTTP error code
              MUST be returned.
            </t>
            <t>
              The Service Provider MUST continue performing as many changes as
              possible and disregard partial failures. The Consumer MAY override
              this behavior by specifying a value for failOnErrors attribute. The failOnErrors
              attribute defines the number of errors that the Service Provider 
              should accept before failing the remaining operations returning the
              response.
            </t>
            <t>
              To be able to reference a newly created Resource the attribute
              bulkId MUST be specified when creating new Resources. The bulkId is
              defined by the Consumer as a surrogate identifier in a POST operation.
              The Service Provider MUST return the same bulkId together with 
              the newly created Resource. The bulkId can then be used by the 
              Consumer to map the Service Provider id with the
              bulkId of the created Resource.
            </t>
            <t>
              There can be more then one operation per Resource in each
              bulk job. The Service Consumer MUST take notice of the unordered
              structure of JSON and the Service Provider can process operations in any order.
              For example, if the Service Consumer sends two PUT operations in one request, the outcome
              is non-deterministic.
            </t>
            <t>
              The Service Provider response MUST include the result of all processed operations. A location attribute
                that includes the Resource's end point MUST be returned for all operations excluding failed
                POSTs. The status attribute includes information about the success or failure of one operation within
                the bulk job.  The attribute status MUST include the code attribute that holds the HTTP response code
                that would have been returned if a single HTTP request would have been used. If an error occurred
                the status MUST also include the description attribute containing a human readable explanation of the
                error.
            </t>
            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve">
                    <![CDATA[
"status": {
  "code": "201"
}
]]></artwork>
            </figure>
            <t>
              The following is an example of a status in a failed operation.
            </t>
            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve">
                    <![CDATA[
"status": {
  "code": "400",
  "description": "Request is unparseable, syntactically incorrect, or violates schema."
}]]></artwork>
            </figure>
            <t>
              The following example shows how to add, update, and remove a user. The failOnErrors
              attribute is set to '1' indicating the Service Provider should return
              on the first error. The POST operation's bulkId value is set to 'qwerty' enabling the Consumer to match
                the new User with the returned Resource id 'uid=alice,dc=example,dc=com'.
            </t>
            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve">
                    <![CDATA[
POST /v1/Bulk
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas":[
    "urn:scim:schemas:core:1.0"
  ],
  "failOnErrors":1,
  "Operations":[
    {
      "method":"POST",
      "path":"/User",
      "bulkId":"qwerty",
      "data":{
        "schemas":[
          "urn:scim:schemas:core:1.0"
        ],
        "userName":"alice"
      }
    },
    {
      "method":"PUT",
      "path":"/User/uid=bob,dc=example,dc=com",
      "version":"3694e05e9dff591",
      "data":{
        "schemas":[
          "urn:scim:schemas:core:1.0"
        ],
        "id":"uid=bob,dc=example,dc=com",
        "userName":"Bob"
      }
    },
    {
      "method":"PATCH",
      "path":"/User/uid=dave,dc=example,dc=com",
      "version":"edac3253e2c0ef2",
      "data":{
        "schemas":[
          "urn:scim:schemas:core:1.0"
        ],
        "id":"uid=dave,dc=example,dc=com",
        "userName":"Dave",
        "meta":{
          "attributes":[
            "nickName"
          ]
        }
      }
    },
    {
      "method":"DELETE",
      "path":"/User/uid=charlie,dc=example,dc=com",
      "version":"0ee8add0a938e1a"
    }
  ]
}]]></artwork>
            </figure>
            <t>
              The Service Provider returns the following response.
            </t>
            <figure height="" suppress-title="false" width="" alt="" title=""
                    align="left">
                <artwork height="" name="" width="" type="" alt="" align="left"
                         xml:space="preserve">
                    <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/Bulk/Xr5ALyfpDj4Gmoeh

{
    "schemas": [
        "urn:scim:schemas:core:1.0"
    ],
    "Operations": [
        {
            "location": "https://example.com/v1/User/uid=alice,dc=example,dc=com",
            "method": "POST",
            "bulkId": "qwerty",
            "version": "oY4m4wn58tkVjJxK",
            "status": {
                "code": "201"
            }
        },
        {
            "location": "https://example.com/v1/User/uid=bob,dc=example,dc=com",
            "method": "PUT",
            "version": "huJj29dMNgu3WXPD",
            "status": {
                "code": "200"
            }
        },
        {
            "location": "https://example.com/v1/User/uid=dave,dc=example,dc=com",
            "method": "PATCH",
            "version": "huJj29dMNgu3WXPD",
            "status": {
                "code": "200"
            }
        },
        {
            "location": "https://example.com/v1/User/uid=charlie,dc=example,dc=com",
            "method": "DELETE",
            "status": {
                "code": "200"
            }
        }
    ]
}]]></artwork>
          </figure>
          <t>
            The following response is returned if an error occurred when attempting to create the User 'alice'. The
              Service Provider stops processing the bulk operation and immediately returns a response to the Consumer.
              The response contains the error and any successful results prior to the error.
          </t>
          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
              <artwork height="" name="" width="" type="" alt="" align="left"
                       xml:space="preserve">
                  <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/Bulk/PPqzp3j5E0FkXGlQ

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "method": "POST",
      "bulkId": "qwerty",
      "status": {
        "code": "400",
        "description": "Request is unparseable, syntactically incorrect, or violates schema."
      }
    }
  ]
}]]></artwork>
          </figure>
          <t>
            If the failOnErrors attribute is not specified or the Service Provider has
            not reached the error limit defined by the Consumer the Service Provider
            will continue to process all operations. The following is an example
            in which all operations failed.
          </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                  xml:space="preserve">
            <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/Bulk/TmP1K5VtAxOQLERb

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "method": "POST",
      "bulkId": "qwerty",
      "status": {
        "code": "400",
        "description": "Request is unparseable, syntactically incorrect, or violates schema."
      }
    },
    {
      "location": "https://example.com/v1/User/uid=bob,dc=example,dc=com",
      "method": "PUT",
      "status": {
        "code": "412",
        "description": "Failed to update as user changed on the server since you last retrieved it."
      }
    },
    {
      "location": "https://example.com/v1/User/uid=dave,dc=example,dc=com",
      "method": "PATCH",
      "status": {
        "code": "412",
        "description": "Failed to update as user changed on the server since you last retrieved it."
      }
    },
    {
      "location": "https://example.com/v1/User/uid=charlie,dc=example,dc=com",
      "method": "DELETE",
      "status": {
        "code": "404",
        "description": "Specified resource; e.g., User, does not exist."
      }
    }
  ]
}]]></artwork>
        </figure>
        <t>
          The Consumer can, within one bulk operation, create a new User, a new Group and add the newly created User to
          the newly created Group.  In order to add the new User to the Group
          the Consumer must use the surrogate id attribute, bulkId, to reference the User. The bulkId attribute value
          must be pre-pended with the literal "bulkId:"; e.g., if the bulkId is 'qwerty' the value is  “bulkId:qwerty”.
          The Service Provider MUST replace the string “bulkId:qwerty” with the permanent Resource id once created.
        </t>
        <t>
          The following example creates a User with the userName 'Alice' and a Group
          with the displayName 'Tour Guides' with Alice as a member.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
POST /v1/Bulk
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "method": "POST",
      "path": "/User",
      "bulkId": "qwerty",
      "data": {
        "schemas": [
          "urn:scim:schemas:core:1.0"
        ],
        "userName": "Alice"
      }
    },
    {
      "method": "POST",
      "path": "/Group",
      "bulkId": "ytrewq",
      "data": {
        "schemas": [
          "urn:scim:schemas:core:1.0"
        ],
        "displayName": "Tour Guides",
        "members": [
          {
            "type": "user",
            "value": "bulkId:qwerty"
          }
        ]
      }
    }
  ]
}]]></artwork>
        </figure>
        <t>
          The Service Provider returns the following response.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/Bulk/Zo3bPdXbCz1B0c3F

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "location": "https://example.com/v1/User/uid=alice,dc=example,dc=com",
      "method": "POST",
      "bulkId": "qwerty",
      "version": "4weymrEsh5O6cAEK",
      "status": {
        "code": "201"
      }
    },
    {
      "location": "https://example.com/v1/Group/cn=Tour Guides,dc=example,dc=com",
      "method": "POST",
      "bulkId": "ytrewq",
      "version": "lha5bbazU3fNvfe5",
      "status": {
        "code": "201"
      }
    }
  ]
}]]></artwork>
        </figure>
        <t>
          A request against the Group 'Tour Guides' returns the following:
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
          <![CDATA[
GET /v1/Group/cn=Tour Guides,dc=example,dc=com
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
]]></artwork>
        </figure>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                  xml:space="preserve">
            <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "totalResults": 1,
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Resources": [
    {
      "id": "ou=Tour Guides,dc=example,dc=com",
      "displayName": "Tour Guides",
      "meta": {
        "created":"2011-08-01T18:29:49.793Z",
        "lastModified":"2011-08-01T20:31:02.315Z",
        "location": "https://example.com/v1/Group/cn=Tour Guides,dc=example,dc=com",
        "version": "lha5bbazU3fNvfe5"
      },
      "members": [
        {
          "value": "uid=alice,dc=example,dc=com",
          "type": "user"
        }
      ]
    }
  ]
}]]></artwork>
        </figure>
        <t>
          Extensions that include references to other Resources MUST be handled in the same way by the Service
          Provider. The following example uses the bulkId attribute within the enterprise extension managerId attribute.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
POST /v1/Bulk
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "method": "POST",
      "path": "/User",
      "bulkId": "qwerty",
      "data": {
        "schemas": [
          "urn:scim:schemas:core:1.0"
        ],
        "userName": "Alice"
      }
    },
    {
      "method": "POST",
      "path": "/User",
      "bulkId": "ytrewq",
      "data": {
        "schemas": [
          "urn:scim:schemas:core:1.0",
          "urn:scim:schemas:extension:enterprise:1.0"
        ],
        "userName": "Bob",
        "urn:scim:schemas:extension:enterprise:1.0": {
          "employeeNumber": "11250",
          "manager": {
            "managerId": "batchId:qwerty",
            "displayName": "Alice"
          }
        }
      }
    }
  ]
}]]></artwork>
        </figure>
        <t>
          The Service Provider MUST try to resolve circular cross references 
          between Resources in a single bulk job but MAY stop after a failed 
          attempt and instead return the status code 409 Conflict. The following
          example exhibits the potential conflict.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                xml:space="preserve">
            <![CDATA[
POST /v1/Bulk
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "method": "POST",
      "path": "/Group",
      "bulkId": "qwerty",
      "data": {
        "schemas": [
          "urn:scim:schemas:core:1.0"
        ],
        "displayName": "Group A",
        "members": [
          {
            "type": "group",
            "value": "bulkId:ytrewq"
          }
        ]
      }
    },
    {
      "method": "POST",
      "path": "/Group",
      "bulkId": "ytrewq",
      "data": {
        "schemas": [
          "urn:scim:schemas:core:1.0"
        ],
        "displayName": "Group B",
        "members": [
          {
            "type": "group",
            "value": "bulkId:qwerty"
          }
        ]
      }
    }
  ]
}]]></artwork>
        </figure>
        <t>
          If the Service Provider resolved the above circular references the following is returned from a subsequent
            GET request.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
GET /v1/Groups?filter=displayName sw 'Group '
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
]]></artwork>
        </figure>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "totalResults": 2,
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Resources": [
    {
      "id": "ou=Group A,dc=example,dc=com",
      "schemas": [
        "urn:scim:schemas:core:1.0"
      ],
      "displayName": "Group A",
      "meta": {
        "created":"2011-08-01T18:29:49.793Z",
        "lastModified":"2011-08-01T18:29:51.135Z",
        "location": "https://example.com/v1/Group/ou=Group A,dc=example,dc=com",
        "version": "mvwNGaxB5SDq074p"
      },
      "members": [
        {
          "value": "ou=GroupB,dc=example,dc=com",
          "type": "group"
        }
      ]
    },
    {
      "id": "ou=GroupB,dc=example,dc=com",
      "schemas": [
        "urn: scim: schemas: core: 1.0"
      ],
      "displayName": "GroupB",
      "meta": {
        "created":"2011-08-01T18:29:50.873Z",
        "lastModified":"2011-08-01T18:29:50.873Z",
        "location": "https://example.com/v1/Group/ou=GroupB,dc=example,dc=com",
        "version": "wGB85s2QJMjiNnuI"
      },
      "members": [
        {
          "value": "ou=GroupA,dc=example,dc=com",
          "type": "group"
        }
      ]
    }
  ]
}]]></artwork>
        </figure>
        <t>
          If the Service Provider supports the change password endpoint the 
          Consumer can create a new User set their password in a single bulk operation.
        </t>
        <t>
          In the following example an existing User's ('bob') password is reset, a new User is created, and the newly
            created User's password is set using the surrogate id, bulkId.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
POST /v1/Bulk
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "method": "POST",
      "path": "/User",
      "bulkId": "qwerty",
      "data": {
        "schemas": [
          "urn:scim:schemas:core:1.0"
        ],
        "userName": "Alice"
      }
    },
    {
      "method": "PATCH",
      "path": "/User/bulkId:qwerty/password",
      "data": {
        "schemas":["urn:scim:schemas:core:1.0"],
        "password":"t1meMa$heen"
      }
    },
    {
      "method": "PATCH",
      "path": "/User/uid=bob,dc=example,dc=com/password",
      "data": {
        "schemas":["urn:scim:schemas:core:1.0"],
        "password":"neeh$aMem1t"
      }
    }
  ]
}]]></artwork>
        </figure>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/Bulk/aWvINDpzLf5ufPqi

{
  "schemas": [
    "urn:scim:schemas:core:1.0"
  ],
  "Operations": [
    {
      "location": "https://example.com/v1/User/uid=alice,dc=example,dc=com",
      "method": "POST",
      "bulkId": "qwerty",
      "version": "Jg8SLbDLADDDyn2w",
      "status": {
          "code": "201"
      }
    },    
    {
      "location": "https://example.com/v1/User/uid=alice,dc=example,dc=com/password",
      "method": "PATCH",
      "status": {
        "code": "204"
      }
    },
    {
      "location": "https://example.com/v1/User/uid=bob,dc=example,dc=com/password",
      "method": "PATCH",
      "status": {
        "code": "204"
      }
    }
  ]
}]]></artwork>
        </figure>
    
        <t>
          The Service Provider MUST define a limit on how many operations
          can be sent in one bulk request. The Service Provider MUST also define the
          max payload size of a bulk request. If either limits are exceeded the Service Provider
          MUST return the HTTP response code 413 Request Entity Too Large. The 
          returned response must also include the attributes maxOperations and
          maxPayloadSize with the limits accepted by the Service Provider.
        </t>
        <t>
          In the following example the Consumer sent a request that exceeded the Service Provider's max  payload size
            1 megabyte.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
POST /v1/Bulk
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
Content-Length: 4294967296

…]]></artwork>
        </figure>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
HTTP/1.1 413 Request Entity Too Large
Content-Type: application/json
Location: https://example.com/v1/Bulk/yfCrVJhFIJagAHj8

{
  "maxOperations": 1000,
  "maxPayload": 1048576
}]]></artwork>
        </figure>    
    
      </section>

      <section title="Data Input/Output Formats" anchor="io-format">
        <t>
          Consumers SHOULD specify the format in which the data is submitted and
          MAY specify the desired response data format. Consumers MAY indicate
          the desired format via an HTTP Accept Header; e.g.,"Accept:
          application/json" or via URI suffix; e.g.,

          <figure height="" suppress-title="false" width="" alt="" title=""
                  align="left">
            <artwork height="" name="" width="" type="" alt="" align="left"
                     xml:space="preserve">
              <![CDATA[
GET /User/uid=bjensen,dc=example,dc=com.json
Host: example.com

GET /User/uid=bjensen,dc=example,dc=com.xml
Host: example.com
            ]]></artwork>
          </figure>

        </t>

        <t>
          Service Providers MUST support the Accept Headers "Accept:
          application/json" for
          <eref target="http://json.org">JSON</eref>
          and "Accept: application/xml" for
          <eref target="http://www.w3.org/XML/">XML</eref>
          and MAY support additional formats if desired. The format defaults to
          JSON if no format is specified. The data structure returned is
          equivalent in both formats; the only difference is in the encoding of
          the data.
        </t>
        <t>
          Singular attributes are encoded as string key/value pairs in JSON;
          e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
"attribute": "value"
                    ]]></artwork>
        </figure>
        <t>and tags with text content in XML; e.g.,</t>
        <figure>
          <artwork><![CDATA[
<attribute>value</attribute>
                    ]]></artwork>
        </figure>
        <t>
          Plural attributes and Plural Bundles are encoded as arrays in JSON;
          e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
"attributes": [ "value1", "value2" ]
                    ]]></artwork>
        </figure>
        <t>
          and repeated tags in XML; e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
<attributes>value1</attributes>
<attributes>value2</attributes>
                    ]]></artwork>
        </figure>
        <t>
          Nodes with multiple sub-nodes are represented as objects in JSON; e.g,
        </t>
        <figure>
          <artwork><![CDATA[
"attribute": { "subattribute1": "value1", "subattribute2": "value2" }
                    ]]></artwork>
        </figure>
        <t>
          and repeated tags in XML; e.g.,
        </t>
        <figure>
          <artwork><![CDATA[
<attribute>
  <subattribute1>value1</subattribute1>
  <subattribute2>value2</subattribute2>
</attribute>
                    ]]></artwork>
        </figure>
      </section>

      <section title="Additional retrieval query parameters"
               anchor="addtl-retrieval-query-params" toc="default">
        <t>
          Consumers MAY request a partial Resource representation on any
          operation that returns a Resource within the response by specifying
          the URL query parameter 'attributes'. When specified, each Resource
          returned SHALL contain the minimal set of Resource attributes and, at
          the Service Providers discretion, the attributes explicitly requested.

          The query parameter attributes value is a comma separated list of
          Resource attribute names (e.g. userName, name, emails). Extended
          schema attribute names must be prefixed with the attribute name's
          fully qualified URN separated by a colon (':'). For example, an
          extended schema name-spaced as 'urn:hr:schemas:user' with the simple
          attribute 'age' is fully encoded as 'urn:hr:schemas:user:age'.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
GET /User/uid=bjensen,dc=example,dc=com?attributes=userName
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8

                    ]]></artwork>
        </figure>
        <t>Giving the response</t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[

HTTP/1.1 200 OK
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "a330bc54f0671c9"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "userName":"bjensen",
  "meta":{
    "created":"2011-08-01T18:29:49.793Z",
    "lastModified":"2011-08-01T18:29:49.793Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com",
    "version":"a330bc54f0671c9"
  }
}

                        ]]></artwork>
        </figure>

      </section>
      
      
      <section title="Attribute Notation">
        <t>
          The operations that sort, filters, the attributes used in PATCH and the attributes used when retrieving partial Resources all requires the Consumer to specify attributes for the Service Provider to act upon. The notation for these four are the same.
        </t>
        <t>
          For simple attributes the Consumers only specifies the attribute name.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title="" align="left">
          <artwork height="" name="" width="" type="" alt="" align="left" xml:space="preserve">
            <![CDATA[
attributes=userName
sortBy=userName&sortOrder=ascending 
filter=userName eq "bjensen"
"meta": { "attributes": [userName] }
            ]]>
          </artwork>
        </figure>
        <t>
          When specifying complex attributes the Consumer MAY specify sub-attribute for attributes and PATCH but MUST specify sub-attributes for sort and filter.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title="" align="left">
          <artwork height="" name="" width="" type="" alt="" align="left" xml:space="preserve">
            <![CDATA[
attributes=name
attributes=name.givenName
sortBy=name.givenName&sortOrder=ascending 
filter=name.givenName eq "bjensen"
"meta": { "attributes": [name] }
"meta": { "attributes": [name.givenName] }
            ]]>
          </artwork>
        </figure>
        <t>
          Simple plural attributes are addressed by the attribute name in the same manner as with simple attributes.
        </t>
        <figure height="" suppress-title="false" width="" alt="" title="" align="left">
          <artwork height="" name="" width="" type="" alt="" align="left" xml:space="preserve">
            <![CDATA[
attributes=emails 
sortBy=emails&sortOrder=ascending
filter=emails eq "bjensen@example.com"
"meta": { "attributes": [emails] }
            ]]>
          </artwork>
        </figure>
        <t>
          With complex plural attributes the Consumer MAY specify sub-attribute for attributes, MUST for sort and filter, and MUST NOT for PATCH .
        </t>
        <figure height="" suppress-title="false" width="" alt="" title="" align="left">
          <artwork height="" name="" width="" type="" alt="" align="left" xml:space="preserve">
            <![CDATA[
 attributes=addresses 
 attributes=addresses.country
 sortBy=addresses.country&sortOrder=ascending 
 filter=addresses.country eq "Sweden"
 "meta": { "attributes": [addresses] }
            ]]>
          </artwork>
        </figure>
        <t>
          To address an attribute in an extension the attribute name is prefixed with the full extension URN + ':', apart from that access to extension are made in the same way as to core attributes.
        </t>
        <t>
          Simple attributes
        </t>
        <figure height="" suppress-title="false" width="" alt="" title="" align="left">
          <artwork height="" name="" width="" type="" alt="" align="left" xml:space="preserve">
            <![CDATA[
attributes=urn:scim:schemas:extension:user:enterprise:1.0:employeeNumber
sortBy=urn:scim:schemas:extension:user:enterprise:1.0:employeeNumber
filter=urn:scim:schemas:extension:user:enterprise:1.0:employeeNumber eq ‘ABC123’ 
"meta": { "attributes": [urn:scim:schemas:extension:user:enterprise:1.0:employeeNumber] }
            ]]>
          </artwork>
        </figure>
        <t>
          Complex attributes
        </t>
        <figure height="" suppress-title="false" width="" alt="" title="" align="left">
          <artwork height="" name="" width="" type="" alt="" align="left" xml:space="preserve">
            <![CDATA[
attributes=urn:scim:schemas:extension:user:enterprise:1.0:manager
attributes=urn:scim:schemas:extension:user:enterprise:1.0:manager.displayName
sortBy=urn:scim:schemas:extension:user:enterprise:1.0:manager.displayName
filter=urn:scim:schemas:extension:user:enterprise:1.0:manager.displayName eq ‘bjensen’
"meta": { "attributes": [urn:scim:schemas:extension:user:enterprise:1.0:manager] }
"meta": { "attributes": [urn:scim:schemas:extension:user:enterprise:1.0:manager.displayName] }
            ]]>
          </artwork>
        </figure>        
      </section>

      
      <section title="HTTP Response Codes">
        <t>
          The SCIM Protocol uses the response
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">
            status codes defined in HTTP
          </eref>
          to indicate operation success or failure. In addition to returning a
          HTTP response code implementers MUST return the errors in the body of
          the response in the client requested format containing the error
          response and, per the HTTP specification, human-readable explanations.
          Implementers SHOULD handle the identified errors as described below.
        </t>

        <texttable anchor='http-error-handling-table'
                   title="Defined error cases">
          <ttcol align='left'>Code</ttcol>
          <ttcol align='left'>Applicability</ttcol>
          <ttcol align='left'>Suggested Explanation</ttcol>
          <c>400 BAD REQUEST</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Request is unparseable, syntactically incorrect, or violates schema
          </c>
          <c>401 UNAUTHORIZED</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Authorization failure</c>
          <c>403 FORBIDDEN</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Server does not support requested operation</c>
          <c>404 NOT FOUND</c>
          <c>GET,PUT,PATCH,DELETE</c>
          <c>Specified resource; e.g., User, does not exist</c>
          <c>409 CONFLICT</c>
          <c>PUT,PATCH,DELETE</c>
          <c>The specified version number does not match the resource's latest
            version number or a Service Provider refused to create a new,
            duplicate resource
          </c>
          <c>412 PRECONDITION FAILED</c>
          <c>PUT,PATCH</c>
          <c>Failed to update as Resource {id} changed on the server since you
            last retrieved it
          </c>
          <c>413 REQUEST ENTITY TOO LARGE</c>
          <c>POST</c>
          <c>{"maxOperations": 1000,"maxPayload": 1048576}</c>
          <c>500 INTERNAL SERVER ERROR</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>An internal error. Implementers SHOULD provide descriptive
            debugging advice
          </c>
          <c>501 NOT IMPLEMENTED</c>
          <c>GET,POST,PUT,PATCH,DELETE</c>
          <c>Service Provider does not support the request operation; e.g.,
            PATCH
          </c>
        </texttable>

        <t>Error example in response to a non-existent GET request.</t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[

HTTP/1.1 404 NOT FOUND

{
  "Errors":[
    {
      "description":"Resource uid=babs not found",
      "code":"404"
    }
  ]
}
              ]]></artwork>
        </figure>
      </section>

      <section title="Versioning Resources" anchor="etags">
        <t>
          The API supports resource versioning via standard,<eref
          target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.19">
          HTTP ETags</eref>. Service providers MAY support both weak and strong
          ETags as the preferred mechanism for performing conditional retrievals
          and ensuring Consumers do not inadvertently overwrite each others
          changes, respectively. When supported SCIM ETags MUST be specified as
          an HTTP header and SHOULD be specified as an attribute within a
          Resource's 'meta' structure.
        </t>

        <t>Example</t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
POST /User  HTTP/1.1
Host: example.com
Content-Type:  application/json
Authorization: Bearer h480djs93hd8
Content-Length: ...

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "userName":"bjensen",
  "externalId":"bjensen",
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  }
}
                        ]]></artwork>
        </figure>

        <t>The server responds with an ETag in the response header and meta
          structure.
        </t>

        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Location: https://example.com/v1/User/uid=bjensen,dc=example,dc=com
ETag: "e180ee84f0671b1"

{
  "schemas":["urn:scim:schemas:core:1.0"],
  "id":"uid=bjensen,dc=example,dc=com",
  "meta":{
    "created":"2011-08-01T21:32:44.882Z",
    "lastModified":"2011-08-01T21:32:44.882Z",
    "location":"https://example.com/v1/User/uid=bjensen,dc=example,dc=com",
    "version":"e180ee84f0671b1"
  },
  "name":{
    "formatted":"Ms. Barbara J Jensen III",
    "familyName":"Jensen",
    "givenName":"Barbara"
  },
  "userName":"bjensen"
}
                        ]]></artwork>
        </figure>
        <t>With the returned ETag, Consumers MAY choose to retrieve the Resource
          only if the Resource has been modified. In addition, if updating,
          specifying an ETag guarantees that previous updates will not be
          overwritten. Note: Per the HTTP specification the ETag value is
          quoted.
        </t>

        <t>Conditional retrieval example using
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.26">
            If-None-Match
          </eref>
          header:
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve"><![CDATA[
GET /User/uid=bjensen,dc=example,dc=com?attributes=displayName
Host: example.com
Accept: application/json
Authorization: Bearer h480djs93hd8
If-None-Match: "e180ee84f0671b1"

                ]]></artwork>
        </figure>

        <t>
          If the Resource has not changed the Service Provider simply returns an
          empty body with a 304 "Not Modified" response code.
        </t>
        <t>
          Similarly, consumers MAY supply an
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24">
            If-Match
          </eref>
          ETag header for PUT, PATCH, and DELETE operations to ensure that the
          requested operation succeeds only if the supplied ETag matches the
          latest Service Provider Resource; e.g., If-Match: "e180ee84f0671b1"
        </t>

        <t>
          To perform DELETE, PATCH, or PUT operations and override ETag
          versioning specify
          <eref
            target="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.24">
            "If-Match: *"
          </eref>
          in lieu of an ETag header.
        </t>
      </section>
      <section title="HTTP Method Overloading">
        <t>In recognition that some clients, servers and firewalls prevent PUT,
          PATCH and DELETE operations a client MAY override the POST operation
          by specifying the custom header "X-HTTP-Method-Override" with the
          intended PUT, PATCH, DELETE operation. For example:
        </t>
        <figure height="" suppress-title="false" width="" alt="" title=""
                align="left">
          <artwork height="" name="" width="" type="" alt="" align="left"
                   xml:space="preserve">
            <![CDATA[
POST /User/uid=bjensen,dc=example,dc=com
X-HTTP-Method-Override: DELETE
]]></artwork>
        </figure>
      </section>
    </section>
    <section title="Acknowledgments">
      <t>Portable Contacts -
        <eref target="http://www.portablecontacts.net/draft-spec.html"
              type="HTML">Portable Contacts 1.0 Draft C
        </eref>
      </t>
    </section>
  </middle>
</rfc>